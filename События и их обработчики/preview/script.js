const btns = document.querySelectorAll('button'),
    overlay = document.querySelector('.overlay');
   
//Это обработчик события, его можно написать и в прямо в HTML код
/* btn.onclick = function() {
    alert('Click');          
}; */
//А это еще один способ написания обработчика,на этот способ можно повесить сразу несколько действий на одно событие
/* btn.addEventListener('click',() => {
    alert('Click');
});

// А вот второе действие одного и тогже события
btn.addEventListener('click',()=> {
    alert('Secondclick');
});
 */
// А здесь оброботчик события, которое обробатывает события "мыши".
// Чтобы поучить инфорцацию о событии нужно обьязательно напсиать callback функцию и написать первый аргумент, а далее 
// написать метод target на этот аргумент, как в примере ниже
/* const deleteElement = (e)=> {
    console.log(e);
    btn.addEventListener('mouseenter',deleteElement);
}; */

//Ниже приведён пример "всплытие событий"
//Всплытие событий - когда один элемент находится в нутри дургого и на обоих повешено обработчик событий. И этот обработчик событий срабатывает с начала на внутреннем элементе и потом на внешнем.
const deleteElement = (e)=> {
    console.log(e.target);
    console.log(e.type);
};
/* btn.addEventListener('click',deleteElement);
overlay.addEventListener('click', deleteElement) */ // Именно такой код даст нам два одинаковых результата, если нажать на button который находиться в нутри "overlay"
// И чтобы такое не происходило мы можем написать "currentTarget" как метод обьекта событийи и тогда мы получим два рахных результата : первое button, так как мы первым нажимаем на него
// Второе "overlay". А если просто отдельно нажать на overlay , то мы получим просто результат overlay , так как мы не нажимали на button  в нутри overlay.

/* const deleteElement = (e)=> {
    console.log(e.currentTarget);
}; */

// Установка обработчика событий на насколько элементов сразу или на "псевдомассив"
/* В переменной "btns" находяться несколько элементов и следующим образом на них устанавливаются обработчики событий 
 */
btns.forEach((btn)=>{
    btn.addEventListener('click', deleteElement);
});

// Ниже приведен пример как устонавливать "опции события" 
//опция пишется внутри фигурных скобок и может стать альтернативой метода "remove"
//Это опция делает так чтобы обработчик события сработал только один раз , как следует из названия опции

/* btns.forEach((btn)=>{
    btn.addEventListener('click', deleteElement,{once:true});
});
 */